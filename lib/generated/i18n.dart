import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get Like => "收藏";
  String get about => "关于";
  String get address => "地址";
  String get alert_login_title => "需要登录";
  String get app_name => "旅行便签";
  String get app_title => "Crazy Flutter";
  String get autoBySystem => "跟随系统";
  String get body_content_is_empty => "正文内容不能为空";
  String get bottom_navigation => "底部导航";
  String get cancel => "取消";
  String get center => "中";
  String get check_update => "检查更新";
  String get click_go_login => "点我登录";
  String get cloudy => "多云";
  String get commit => "提交";
  String get confirm => "确认";
  String get could_not_launch => "不支持打开链接：";
  String get dark_model => "夜间模式";
  String get email => "邮箱";
  String get email_reset_pwd => "邮箱重置密码";
  String get empty => "空空如也~";
  String get favorite => "收藏";
  String get fine => "晴";
  String get font => "字体";
  String get fontKangXi => "康熙";
  String get fontKuaiLe => "快乐字体";
  String get font_size => "字号";
  String get go_register => "go register";
  String get hide_author => "隐藏作者";
  String get hide_border => "隐藏边框";
  String get icon => "头像";
  String get image => "图";
  String get joinWanAndroid => "加入玩Android";
  String get label => "标签";
  String get label_name => "标签名";
  String get language => "多语言";
  String get left => "左";
  String get loadFail => "失败";
  String get loading => "加载中...";
  String get loadingEmpty => "暂无内容";
  String get loadingIdle => "......";
  String get login => "login";
  String get login_password_hint => "您的登录密码";
  String get logout_message => "您确定要退出登录吗？";
  String get name_audit => "更改名字";
  String get needLogin => "需要登录";
  String get newVersionIsComing => "新版本来啦!";
  String get nickname => "昵称";
  String get overcast => "阴";
  String get password => "密码";
  String get passwordRequired => "密码不能为空";
  String get password_login => "密码登录";
  String get pattern_lock => "手势密码";
  String get personal_info => "个人信息";
  String get pl_continue => "继续";
  String get post_message => "意见反馈";
  String get rain => "雨";
  String get reLoading => "重新加载";
  String get refresh => "刷新";
  String get register => "register";
  String get reset_pwd => "重置密码";
  String get retry => "重试";
  String get right => "右";
  String get save => "保存";
  String get save_fail => "保存失败";
  String get save_image => "保存图片";
  String get save_success => "保存成功";
  String get save_to_phone => "保存到手机";
  String get saving => "正在保存";
  String get score => "评分";
  String get share => "分享";
  String get show_author => "显示作者";
  String get show_border => "显示边框";
  String get slogan => "个性签名";
  String get slogan_edit => "更改签名";
  String get snow => "雪";
  String get tabHome => "首页";
  String get tabProject => "项目";
  String get tabSettings => "设置";
  String get tabStructure => "体系";
  String get theme => "主题";
  String get time => "时间";
  String get timeOut => "超时错误";
  String get tips => "提示";
  String get tips_name_audit => "让人印象深刻的名字";
  String get today => "Today";
  String get unLike => "取消收藏";
  String get update => "更新";
  String get update_time => "更新时间:";
  String get userNameRequired => "用户名不能为空";
  String get user_name => "用户名";
  String get user_name_or_email => "用户名或邮箱";
  String get waiting => "请稍后...";
  String get weather => "天气";
  String get wechatAccount => "公众号";
}

class $en extends S {
  const $en();
}

class $zh extends S {
  const $zh();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get logout_message => "您确定要退出登录吗？";
  @override
  String get waiting => "请稍后...";
  @override
  String get user_name => "用户名";
  @override
  String get fontKangXi => "康熙";
  @override
  String get go_register => "还没账号？快去注册";
  @override
  String get loadingEmpty => "暂无内容";
  @override
  String get save => "保存";
  @override
  String get update => "更新";
  @override
  String get show_author => "显示作者";
  @override
  String get login => "登录";
  @override
  String get tips => "提示";
  @override
  String get reLoading => "重新加载";
  @override
  String get passwordRequired => "密码不能为空";
  @override
  String get password => "密码";
  @override
  String get slogan_edit => "更改签名";
  @override
  String get pattern_lock => "手势密码";
  @override
  String get fine => "晴";
  @override
  String get today => "今天";
  @override
  String get loadingIdle => "......";
  @override
  String get weather => "天气";
  @override
  String get login_password_hint => "您的登录密码";
  @override
  String get label_name => "标签名";
  @override
  String get loadFail => "失败";
  @override
  String get hide_border => "隐藏边框";
  @override
  String get hide_author => "隐藏作者";
  @override
  String get rain => "雨";
  @override
  String get bottom_navigation => "底部导航";
  @override
  String get could_not_launch => "不支持打开链接：";
  @override
  String get address => "地址";
  @override
  String get save_to_phone => "保存到手机";
  @override
  String get app_title => "疯狂Flutter";
  @override
  String get reset_pwd => "重置密码";
  @override
  String get label => "标签";
  @override
  String get loading => "加载中...";
  @override
  String get user_name_or_email => "用户名或邮箱";
  @override
  String get timeOut => "超时错误";
  @override
  String get newVersionIsComing => "新版本来啦!";
  @override
  String get left => "左";
  @override
  String get snow => "雪";
  @override
  String get userNameRequired => "用户名不能为空";
  @override
  String get check_update => "检查更新";
  @override
  String get password_login => "密码登录";
  @override
  String get name_audit => "更改名字";
  @override
  String get time => "时间";
  @override
  String get save_image => "保存图片";
  @override
  String get favorite => "收藏";
  @override
  String get register => "注册";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh":
          S.current = const $zh();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
